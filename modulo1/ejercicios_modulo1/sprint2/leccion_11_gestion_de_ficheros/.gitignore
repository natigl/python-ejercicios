
PRIMERA FUNCION GESTION DE FICHEROS

def gestion_ficheros_2(carp1, carp2, carp3):
    # Definimos una función que creará un fichero, creará otro fichero en su interior, y modificará el nombre de la primera por otro
    # Comprobamos en qué carpeta estamos trabajando e imprimimos la ruta
    ruta_carp1 = os.getcwd()
    print(ruta_carp1)

    print("------------------------------")

    # Creamos la carpeta. Si ya existe, nos imprimirá un aviso
    try:
        os.mkdir(carp1)
        print(f"Hemos creado la carpeta {carp1}")
    except:
        print(f"Esta carpeta ya existe")
    
    print("------------------------------")
    
    # Entramos en la carpeta creada anteriormente
    os.chdir(carp1)
    print(f"Nos movemos ahora a la carpeta {carp1}")

    # Creamos la carpeta 2
    os.mkdir(carp2)
    print(f"Hemos creado la carpeta {carp2} dentro de {carp1}")
    
    print("------------------------------")
    
    # Entramos en la carpeta creada en el paso anterior
    os.chdir(carp2)
    print(f"Nos movemos ahora a la carpeta {carp2}")
    
    ruta_datos = os.getcwd()
    print(ruta_datos)

    print("------------------------------")

    # Nos movemos a la carpeta madre y cambiamos el nombre a la carpeta creada en el primer paso
    os.chdir("../../")
    try:
        os.rename(carp1, carp3)
        print(f"Modificamos el nombre de {carp1} a {carp3}")
    except:
        print("Ya existe una carpeta con ese nombre")
    return 

SEGUNDA FUNCION GESTION DE FICHEROS 

def leer_fichero():
    # Definimos una función que primero lea todo el archivo.
    # Pedirá con un input la ruta relativa del archivo, que le habremos indicado anteriormente
    ruta = input("Donde está el fichero?")
    with open(ruta) as f:
        print(f.read())

    print("------------------------------")

    # Imprimimos ahora solo la línea 5 del archivo
    with open("primera-toma-contacto/datos/saludo.txt") as f:
        f.readline()
        f.readline()
        f.readline()
        f.readline()
        print(f.readline())

    return

TERCERA FUNCION GESTION DE FICHEROS

def escribir_archivo(nombre, modo,encod, texto):
    # Estamos creando una función que nos de el nombre de un archivo, el modo en el que abrirlo por defecto, el encoding y el texto
    # que hay que que escribir en él.

    # Definimos una variable que sea una lista en el que estarán todos los archivos y ficheros de nuestra ubicación
    lista_contenido = os.listdir()

    # Comprobamos si el archivo ya existe en nuestra ubicación
    if nombre in lista_contenido:
        # Si ya existe, preguntamos si quiere sobreescribirlo
        sobresc_sino = input("Desea sobreescribir el archivo?")
        if sobresc_sino == "Si":
            # Si es que sí, escribimos encima
            with open(nombre, "w") as f:
                f.write(texto)
            # Si no quiere sobreescribirlo, no haremos nada
        elif sobresc_sino == "No":
            escribir_despues = input("Desea añadir el texto al final del archivo?")
            if escribir_despues == "Si":
                with open(nombre, "a") as f:
                    f.write(texto)
            else:
                pass

    # Si el archivo no existe, lo creamos
    else:
        with open(nombre, "x", encoding=encod) as f:
            f.close
        # Y escribimos el texto en él
        with open(nombre,"w",texto) as f:
            f.write(texto)
    return

FUNCION PELICULAS GESTION DE FICHEROS 

def trabajar_xml(nombre):
# Definimos una función para extraer los datos de un archivo xml y comprobar que hay en él

    # Abrimos el fichero, obtenemos el elemento "raiz" y lo guardamos en una variable.
    # Imprimimos el tag y los atributos
    tree = ET.parse(nombre)
    root = tree.getroot()
    raiz = root.tag
    print(root.tag)
    print(root.attrib)

    print("---------------------------------------------------------")

    # Sacamos y mostramos por pantalla todos los elementos del root.
    for child in root:
        print(f"{child.tag}: Es un hijo de nuestra raiz {raiz}")
    for subchild in child:
        print(f"    {subchild.tag}: Es un nieto de nuestra raiz {raiz}")
        for subsubchild in subchild:
            print(f"        {subsubchild.tag}: Es un bisnieto de nuestra raiz {raiz}")

    print("---------------------------------------------------------")

    # Iterando, accedemos al elemento "description" para imprimir el contenido para cada película
    for child in root:
        for subchild in child:
            for subsubchild in subchild:
                for subsubsubchild in subsubchild:
                    if subsubsubchild.tag == "description":
                        titulo = subsubchild.attrib["title"]
                        print(f"El argumento de {titulo} es {subsubsubchild.text}")
    
    print("---------------------------------------------------------")

    # Accedemos ahora al elemento "year" para saber en que año se rodó cada película
    for child in root:
        for subchild in child:
            for subsubchild in subchild:
                for subsubsubchild in subsubchild:
                    if subsubsubchild.tag == "year":
                        titulo = subsubchild.attrib["title"]
                        print(f"{titulo} se estrenó en {subsubsubchild.text}")

    return